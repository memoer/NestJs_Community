# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CheckedAllNotification {
  count: Int!
}

type CommentChildModel {
  author: UserModelObjectType!
  authorId: Int!
  content: String!
  createdAt: DateTime!
  id: Int!
  tags: String
}

input CommentIncludeInputType {
  author: Boolean
  childs: Boolean
}

type CommentModelObjectType {
  author: UserModelObjectType!
  authorId: Int!
  childs: [CommentChildModel]
  commentId: Int
  content: String!
  createdAt: DateTime!
  id: Int!
  post: PostModelObjectType!
  postId: Int!
  tags: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GetCommentOutputGql {
  count: Int!
  data: [CommentModelObjectType!]!
  page: Int!
  take: Int!
}

type GetPostListOutputGql {
  count: Int!
  data: [PostModelObjectType!]!
  page: Int!
  take: Int!
}

type GetUserListOutputGql {
  count: Int!
  data: [UserModelObjectType!]!
  page: Int!
  take: Int!
}

type Mutation {
  chekcedAllNotification: CheckedAllNotification!
  chekcedNotification: NotificationModel!
  createChildComment(content: String!, parentId: Int!, tags: [Int]): CommentModelObjectType!
  createComment(content: String!, postId: Int!, tags: [Int]): CommentModelObjectType!
  createLike(postId: Int!): Boolean!
  createPost(content: String!, title: String!): PostWithoutAuthorOutputGql!
  createUser(email: String!, name: String!, password: String!, role: UserRole!): UserModelObjectType!
  deleteComment(id: Int!): Boolean!
  deleteLike(id: Int!): Boolean!
  deletePost(id: Int!): Boolean!
  deleteUser: Boolean!
  updateComment(content: String, id: Int!, tags: String): CommentModelObjectType!
  updatePost(content: String, id: Int!, title: String): PostWithoutAuthorOutputGql!
  updateUser(email: String, name: String, password: String, role: UserRole): UserModelObjectType!
}

type NotificationModel {
  checked: Boolean!
  createdAt: DateTime!
  id: Int!
  message: String!
  whoId: Int!
}

type NotifyToUserOutputGql {
  id: Int!
  message: String!
  notificationId: Int!
}

type PostModelObjectType {
  author: UserModelObjectType!
  authorId: Int!
  comments: [CommentModelObjectType]
  content: String!
  createdAt: DateTime!
  id: Int!
  likeCount: Int!
  title: String!
}

type PostWithoutAuthorOutputGql {
  authorId: Int!
  comments: [CommentModelObjectType]
  content: String!
  createdAt: DateTime!
  id: Int!
  title: String!
}

type Query {
  getCommentOfPost(include: CommentIncludeInputType, page: Int = 1, postId: Int!, take: Int = 10): GetCommentOutputGql!
  getMe(include: Boolean = false): UserModelObjectType!
  getMyPost(include: Boolean = false, page: Int = 1, take: Int = 10): GetPostListOutputGql!
  getPostList(include: Boolean = false, page: Int = 1, take: Int = 10): GetPostListOutputGql!
  getPostOne(id: Int!, include: Boolean = false): PostModelObjectType!
  getUserList(page: Int = 1, take: Int = 10): GetUserListOutputGql!
  getUserOne(id: Int!, include: Boolean = false): UserModelObjectType!
  login(email: String!, password: String!): String!
}

type Subscription {
  notifyToUser: NotifyToUserOutputGql!
}

type UserModelObjectType {
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String!
  notificationCount: Int!
  password: String!
  posts: [PostModelObjectType]
  role: UserRole!
}

enum UserRole {
  MENTOR
  STUDENT
}
